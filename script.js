//Exerc√≠cio 1
const myName = "Elias Paiva";
const birthCity = "Rio de Janeiro";
const birthYear = 1991;
console.log(myName, birthCity, birthYear);

//Exerc√≠cio 2
const base = 5;
const height = 8;
const area = base * height;
const perimeter = 2 * (base + height);
console.log(perimeter);

//Exerc√≠cio 3
const grade = 85;

if (grade >= 80) {
  let message = "Parab√©ns, voc√™ faz parte do grupo de pessoas aprovadas!";
  console.log(message);
} else if (grade < 80 && grade >= 60) {
  let message = "Voc√™ est√° na nossa lista de espera.";
  console.log(message);
} else {
  let message = "Voc√™ foi reprovado.";
  console.log(message);
}

//Exerc√≠cio 4
const currentHour = 4;
let message = "";

if (currentHour >= 22) {
  message = "N√£o dever√≠amos comer nada, √© hora de dormir";
} else if (currentHour >= 18 && currentHour < 22) {
  message = "Rango da noite, vamos jantar!";
} else if (currentHour >= 14 && currentHour < 18) {
  message = "Vamos fazer um bolo pro caf√© da tarde?";
} else if (currentHour >= 11 && currentHour < 14) {
  message = "Hora do almo√ßo!!!";
} else if (currentHour >= 4 && currentHour <= 11) {
  message = "Hmmm, cheiro de caf√© rec√©m passado";
}
console.log(message);

// Exerc√≠cio 5
let num1 = 20;
let num2 = 5;
let adicao = num1 + num2;
let subtracao = num1 - num2;
let multiplicacao = num1 * num2;
let divisao = num1 / num2;
let resto = num1 % num2;
console.log("A soma dos n√∫meros √©: " + adicao);
console.log("A subtra√ß√£o dos n√∫meros √©: " + subtracao);
console.log("A multiplica√ß√£o dos n√∫meros √©: " + multiplicacao);
console.log("A divis√£o dos n√∫meros √©: " + divisao);
console.log("O resto da divis√£o √©: " + resto);

// Exerc√≠cio 6
let numOne = 5;
let numTwo = 1;

if (numOne > numTwo) {
  console.log("O maior n√∫mero √©: " + numOne);
} else if (numTwo === numOne) {
  console.log("Os n√∫meros sao iguais");
} else {
  console.log("O maior n√∫mero √© o: " + numTwo);
}

// Exerc√≠cio 7
let numero1 = 151;
let numero2 = 150;
let numero3 = 15;

if (numero1 > numero2 && numero1 > numero3) {
  console.log("O maior n√∫mero √©: " + numero1);
} else if (numero2 > numero1 && numero2 > numero3) {
  console.log("O maior n√∫mero √©: " + numero2);
} else if (numero3 > numero1 && numero3 > numero2) {
  console.log("O maior n√∫mero √© o: " + numero3);
} else if (numero1 === numero2 && numero2 === numero3) {
  console.log("Todos os n√∫meros sao iguais");
} else console.log("Nao h√° um n√∫mero maior, h√° numeros iguais");

// Exerc√≠cio 8
//Utilize if...else para escrever um c√≥digo que defina tr√™s vari√°veis com os valores dos tr√™s √¢ngulos internos de um tri√¢ngulo. Retorne true se os √¢ngulos representarem os √¢ngulos de um tri√¢ngulo e false, caso contr√°rio. Se algum √¢ngulo for inv√°lido, voc√™ deve retornar uma mensagem de erro.

//üëÄ Dica: para os √¢ngulos serem de um tri√¢ngulo v√°lido, a soma dos tr√™s √¢ngulos deve ser 180 graus. Um √¢ngulo ser√° considerado inv√°lido se n√£o tiver um valor positivo.
const ang1 = 180;
const ang2 = 1;
const ang3 = 0;
const angle = ang1 + ang2 + ang3;

if (angle === 180) {
  console.log("v√°lido");
} else if (angle < 0) {
  console.log("inv√°lido");
}

// Exerc√≠cio 9
//Utilize if...else para escrever um c√≥digo que defina tr√™s n√∫meros em vari√°veis e retorne true se pelo menos uma das tr√™s for par. Caso contr√°rio, o c√≥digo deve retornar false.
// Fa√ßa esse exerc√≠cio utilizando somente um if.

const numeroOne = 1;
const numeroTwo = 2;
const numeroThree = 3;

if (numeroOne % 2 == 0 || numeroTwo % 2 == 0 || numeroThree % 2 == 0) {
  console.log(true);
} else {
  console.log(false);
}

// Exerc√≠cio 10
// Altere o valor da vari√°vel menuServices para que ela passe a ter o valor "Servi√ßos". Isso deve ser feito atrav√©s da vari√°vel menu.
const menu = ["Home", "Servi√ßos", "Portf√≥lio", "Links"];
const menuServices = menu[1];
console.log(menuServices);

// Exerc√≠cio 10
//Adicione o valor "Contato" no final do array menu.
const array = ["Home", "Servi√ßos", "Portf√≥lio", "Links"];
array.push("Contato");
console.log(array);

// Exerc√≠cio 11 for loop - multiplique cada elemento por 2
const lotteryNumbers = [4, 8, 15, 16, 23, 42];
for (let i = 0; i < lotteryNumbers.length; i++) {
  console.log(lotteryNumbers[i] * 2);
  console.log(`N√∫mero ${i} = ${lotteryNumbers[i]}`);
}

// Exerc√≠cio 12 for loop
for (let i = 0; i < lotteryNumbers.length; i++) {
  console.log(lotteryNumbers[i] * 2);
  console.log(`N√∫mero ${i} = ${lotteryNumbers[i]}`);
}

// Exerc√≠cio 13 for loop - jogar na loteria
const numerosLoteria = [];
const myGame = [4, 8, 15, 16, 23, 42];
for (let i = 0; i < 6; i++) {
  numerosLoteria.push(Math.ceil(Math.random() * 60));
}

console.log(numerosLoteria);

// Exerc√≠cio 14 Utilize o for para imprimir os elementos da lista groceryList atrav√©s de console.log():

const groceryList = ["Arroz", "Feij√£o", "Alface", "Melancia", "Macarr√£o"];

for (let index = 0; index < groceryList.length; index++) {
  console.log(groceryList[index]);
}

//Exerc√≠cio 15
const numbers = [5, 9, 3, 19, 70, 8, 100, 2, 35, 27];
let somaArray = 0;
for (let index = 0; index < numbers.length; index++) {}

//Exerc√≠cio 16 Some todos os valores contidos no array e imprima o resultado. - 278
//for (let index = 0; index < numbers.length; index++) {
//  console.log(somaArray += numbers[index]);}

// Exerc√≠cio 17 Calcule e imprima a m√©dia aritm√©tica dos valores contidos no array. A m√©dia aritm√©tica √© o resultado da soma de todos os elementos dividido pelo n√∫mero total de elementos.
//const media = somaArray / numbers.length
//console.log(media);

// Exerc√≠cio 18 Com base no c√≥digo que acabou de gerar, referente ao c√°lculo da m√©dia aritm√©tica, fa√ßa com que: caso o valor final seja maior que 20, imprima a mensagem "O valor da m√©dia aritm√©tica √© maior que 20"; e, caso n√£o seja maior que 20, imprima a mensagem "O valor da m√©dia aritm√©tica √© menor ou igual a 20".
//if (media > 20) {
//    console.log("O valor da m√©dia aritm√©tica √© maior que 20");
//} else {
//    console.log("O valor da m√©dia aritm√©tica √© menor ou igual a 20");
//}

// Exerc√≠cio 19 Utilizando for, descubra o maior valor contido no array e imprima-o.
//console.log(Math.max(...numbers));

// Exerc√≠cio 20 Descubra quantos valores √≠mpares existem no array e imprima o resultado. Caso n√£o exista nenhum, imprima a mensagem: "Nenhum valor √≠mpar encontrado".
// let numerosImpares = 0;
// for (i = 0; i < numbers.length; i++) {
//    if (numbers[i] % 2 == 0) {
//        console.log("este n√∫mero √© par");
//    } else {
//        numerosImpares += 1;
//        console.log("este n√∫mero √© impar");
//   }
// }
//console.log(numerosImpares);

// Exerc√≠cio 21
function sum(num1, num2) {
  return num1 + num2;
}
console.log(sum(1, 1));

//Exerc√≠cio 22
const helloPeople = (name) => `Ol√° ${name}, tudo bem?`;
console.log(helloPeople("Elias"));

//Exerc√≠cio 23
//Crie uma fun√ß√£o que retorne o maior e o menor n√∫mero de uma array

const numberArray = () => {
  const numbers = [5, 9, 3, 19, 70, 8, 100, 2, 35, 27];
  const maxNumber = Math.max(...numbers);
  const lowestNumber = Math.min(...numbers);
  return { maxNumber, lowestNumber };
};
console.log(numberArray());

//Exerc√≠cio 23
const balance = 50;

const sumBank = (value) => {
  return value + balance;
};
console.log(sumBank(10));

const subBank = (value) => {
  return value - balance;
};
console.log(subBank(50));

const multBank = (value) => {
  return value * balance;
};
console.log(multBank(50));

const divBank = (value) => {
  return value / balance;
};
console.log(Math.ceil(divBank(35)));

const mcDonalds = {
  bigMac: 26.9,
  bigTasty: 39.9,
  mcFritasMedia: 13.9,
  topSundayChocolate: 11.9,
  isDelicious: true,
  address: {
    city: "S√£o Paulo",
    state: "SP",
    unitName: "Shopping Tatuap√©",
  },
};

console.log(Object.entries(mcDonalds));

//Exerc√≠cio 24
/* 
RELAT√ìRIO DE ITEMS VENDIDOS NO MC DONALDS
Crie uma fun√ß√£o que retorna um relat√≥rio com a quantidade de cada item vendido. Esse relat√≥rio precisa estar no seguinte formato:
{
  sanduiches: 0,
  acompanhamentos: 0,
  sobremesas: 0,
  bebidas: 0,
}
*/
 const menu = require("./data");

  const getMcInfo = () => {
   const report = {
        sanduiches: 0,
        acompanhamentos: 0,
        sobremesas: 0,
        bebidas: 0,
      };

       const keys = Object.entries(menu);
       console.log(keys);
       
       for (let index = 0; index < keys.length; index +=1) {
        report[keys[index]] = menu[keys[index]].length;

       };

       return report;
  };
  console.log(getMcInfo());



//Exerc√≠cio 25
// Crie uma fun√ß√£o que retorne a quantidade total de itens vendidos.

const totalItems = () => {
  const items = getMcInfo();

  const values = Object.values(items);
  console.log(values);
  let sum = 0;

  for( let index = 0; index < values.length; index += 1) {
    sum += values[index]
  }

  return sum;
};

console.log(totalItems());

//Exerc√≠cio 25
/* 
Crie uma vari√°vel chamada player e atribua a ela um objeto que re√∫na todas as informa√ß√µes das vari√°veis listadas.

const name = 'Marta';
const lastName = 'Silva';
const age = 34;
const medals = { golden: 2, silver: 3 };
const bestInTheWorld = [2006, 2007, 2008, 2009, 2010, 2018];
*/


/* 
Exerc√≠cio 26
Acesse as chaves name, lastName e age por meio da sintaxe meuObjeto.chave, concatene as informa√ß√µes e armazene na vari√°vel message no seguinte formato: "A jogadora Marta Silva tem 34 anos de idade".
*/
const player = {
  name: "Marta",
  lastName: "Silva",
  age: 34,
  medals: { golden: 2, silver: 3 },
  bestInTheWorld: [2006, 2007, 2008, 2009, 2010, 2018]
}

const fullMessage = `A jogadora ${player.name} ${player.lastName} tem ${player.age} anos de idade.`;
console.log(fullMessage);


/* 
Exerc√≠cio 27
Acesse as chaves name, lastName e age por meio da sintaxe meuObjeto.chave, concatene as informa√ß√µes e armazene na vari√°vel message no seguinte formato: "A jogadora Marta Silva tem 34 anos de idade".
*/

const fullMessageTwo = `A jogadora ${player.name} ${player.lastName} foi eleita a melhor do mundo por ${player.bestInTheWorld.length} vezes.`;

console.log(fullMessageTwo);



//Exerc√≠cio 28
//Com base neste objeto, fa√ßa os exerc√≠cios a seguir.

const reader = {
  name: 'Julia',
  lastName: 'Pessoa',
  age: 21,
  favoriteBooks: [
    {
      title: 'O Senhor dos An√©is - a Sociedade do Anel',
      author: 'J. R. R. Tolkien',
      publisher: 'Martins Fontes',
    },
  ],
};

console.log(reader);

//Print this: O livro favorito de Julia Pessoa se chama 'O Senhor dos An√©is - a Sociedade do Anel'."

const thisReader = `O livro favorito de ${reader.name} ${reader.lastName} se chama ${reader.favoriteBooks[0].title}`;
console.log(thisReader);



/* 
Exerc√≠cio 29
Com base neste objeto, fa√ßa os exerc√≠cios a seguir.

const reader = {
  name: 'Julia',
  lastName: 'Pessoa',
  age: 21,
  favoriteBooks: [
    {
      title: 'O Senhor dos An√©is - a Sociedade do Anel',
      author: 'J. R. R. Tolkien',
      publisher: 'Martins Fontes',
    },
  ],
};

 Adicione um novo livro favorito na chave favoriteBooks, que √© um array de objetos. Atribua a essa chave um objeto que contenha as seguintes informa√ß√µes:

 {
  title: 'Harry Potter e o Prisioneiro de Azkaban',
  author: 'JK Rowling',
  publisher: 'Rocco',
}
*/


reader.favoriteBooks.push({
  title: 'Harry Potter e o Prisioneiro de Azkaban',
  author: 'JK Rowling',
  publisher: 'Rocco',
})

console.log(reader);

/* 
Exerc√≠cio 30
Com base neste objeto, fa√ßa os exerc√≠cios a seguir.

const reader = {
  name: 'Julia',
  lastName: 'Pessoa',
  age: 21,
  favoriteBooks: [
    {
      title: 'O Senhor dos An√©is - a Sociedade do Anel',
      author: 'J. R. R. Tolkien',
      publisher: 'Martins Fontes',
    },
  ],
};

 Acesse as chaves name e favoriteBooks e fa√ßa um console.log() no seguinte formato:

"Julia tem {quantidade} livros favoritos."

{quantidade} corresponde √† quantidade de livros favoritos, sendo um n√∫mero gerado automaticamente pelo seu c√≥digo. Caso a quantidade seja igual a 1, a frase deve ser:

"Julia tem 1 livro favorito."
*/

console.log(reader.favoriteBooks.length);

if (reader.favoriteBooks.length == 1 ) {
  console.log(`${reader.name} tem 1 livro favorito`)
} else {
  console.log(`${reader.name} tem ${reader.favoriteBooks.length} livros favoritos`);
}
;

/* 
Exerc√≠cio 31

Imagine que voc√™ seja respons√°vel por cuidar do sistema de entrega de um restaurante e que precise enviar mensagens com as informa√ß√µes da compra. Para isso, use o seguinte c√≥digo:

Quest√£o 1: Complete a fun√ß√£o customerInfo() para que seu retorno seja: 'Ol√°, Ana Silveira, entrega para: Rafael Andrade, Telefone: 11-98763-1416, Rua das Flores, N√∫mero: 389, AP: 701.'.

Quest√£o 2: Complete a fun√ß√£o orderModifier() para que seu retorno seja: 'Ol√°, Luiz Silva, o valor total de seu pedido de marguerita, pepperoni e Coca-Cola Zero √© R$ 50,00.'.

Modifique o nome da pessoa compradora para Luiz Silva;
Modifique o valor total da compra para R$ 50,00.
*/

const order = {
  name: 'Rafael Andrade',
  phoneNumber: '11-98763-1416',
  address: {
    street: 'Rua das Flores',
    number: '389',
    apartment: '701',
  },
  order: {
    pizza: {
      marguerita: {
        amount: 1,
        price: 25,
      },
      pepperoni: {
        amount: 1,
        price: 20,
      },
    },
    drinks: {
      coke: {
        type: 'Coca-Cola Zero',
        price: 10,
        amount: 1,
      },
    },
    delivery: {
      deliveryPerson: 'Ana Silveira',
      price: 5,
    },
  },
  payment: {
    total: 60,
  },
};

const customerInfo = (fullOrder) => {
  // Quest√£o 1: Complete a fun√ß√£o customerInfo() para que seu retorno seja: 'Ol√°, Ana Silveira, entrega para: Rafael Andrade, Telefone: 11-98763-1416, Rua das Flores, N√∫mero: 389, AP: 701.

  return `Ol√° ${order.order.delivery.deliveryPerson}, entrega para: ${order.name}, Telefone: ${order.phoneNumber}, ${order.address.street}, N√∫mero: ${order.address.number}, AP:${order.address.apartment}.`
}

console.log(customerInfo(order));


const orderPizza = {
  name: 'Rafael Andrade',
  phoneNumber: '11-98763-1416',
  address: {
    street: 'Rua das Flores',
    number: '389',
    apartment: '701',
  },
  order: {
    pizza: {
      marguerita: {
        amount: 1,
        price: 25,
      },
      pepperoni: {
        amount: 1,
        price: 20,
      },
    },
    drinks: {
      coke: {
        type: 'Coca-Cola Zero',
        price: 10,
        amount: 1,
      },
    },
    delivery: {
      deliveryPerson: 'Luiz Silva',
      price: 5,
    },
  },
  payment: {
    total: 60,
  },
};


const orderModifier = (fullOrder) => {
  // Complete a fun√ß√£o orderModifier() para que seu retorno seja: 'Ol√°, Luiz Silva, o valor total de seu pedido de marguerita, pepperoni e Coca-Cola Zero √© R$ 50,00.'.

  return `Ol√° ${order.order.delivery.deliveryPerson}, entrega para: ${order.name}, Telefone: ${order.phoneNumber}, ${order.address.street}, N√∫mero: ${order.address.number}, AP:${order.address.apartment}.`
}

console.log(orderModifier(order));



/* 
Exerc√≠cio 32

Quest√£o 1: Crie uma fun√ß√£o que obtenha o valor da chave de acordo com sua posi√ß√£o no array. Essa fun√ß√£o deve possuir dois par√¢metros: o objeto e a posi√ß√£o no array.

Quest√£o 2: Crie uma fun√ß√£o que retorne a soma do n√∫mero total de estudantes em todos os cursos.


Quest√£o 3: Crie uma fun√ß√£o que verifica se uma determinada chave existe em todos os elementos do array lessons. O retorno deve ser um booleano (true ou false). Essa fun√ß√£o deve possuir dois par√¢metros: o objeto e o nome da chave.

Quest√£o 4: Crie uma fun√ß√£o para alterar o turno para noite no curso de Python. Essa fun√ß√£o deve ter tr√™s par√¢metros: a base de dados a ser modificada, o nome do curso e o novo valor da chave.
*/


const school = {
  lessons: [
    {
      course: 'Python',
      students: 20,
      professor: 'Carlos Patr√≠cio',
      shift: 'Manh√£',
    },
    {
      course: 'Kotlin',
      students: 10,
      professor: 'Gabriel Oliva',
      shift: 'Noite',
    },
    {
      course: 'JavaScript',
      students: 738,
      professor: 'Gustavo Caetano',
      shift: 'Tarde',
    },
    {
      course: 'MongoDB',
      students: 50,
      shift: 'Noite',
    },
  ]
};

// Quest√£o 1
const getValueByNumber = (obj, index) => Object.values(obj)[index];

console.log(getValueByNumber(school, 0));

// Quest√£o 2
const sumStudents = () => {

let totalStudents = 0

   school.lessons.forEach(lesson => {
     totalStudents += lesson.students
  });
     return totalStudents;
}

console.log(sumStudents());

// Quest√£o 3
const verifyProp = (obj, key) => {
  for (let index = 0; index < obj.lessons.length; index += 1) 
    { if (obj.lessons[index][key] === undefined) 
      { return false; } } return true; } 
      console.log(verifyProp(school, 'professor')); // false 



const dataMap = require("./dataMap")
console.log(dataMap.cards.name);


// Exex√≠cio 33
// Por meio do array de frutas chamado basket, crie um objeto que contenha o nome da fruta como chave e a quantidade de vezes que ela aparece no array como valor.

const strings = ["apple", "banana", "apple", "orange", "banana", "apple"];

// Create an empty object to store counts
const counts = {};

for (const str of strings) {
  counts[str] = (counts[str] || 0) + 1;
}

console.log(counts);


// Exex√≠cio 34
const dataCards = require("./dataMap");

const newArray = [];

for (let index = 0; index < dataCards.types.length; index +=1) {
  newArray.push(dataCards.types[index].name)
}
console.log(newArray);

const dataCards = require("./dataMap");
const newArrayMap = dataCards.attributes.map((attribute) => attribute.id)
console.log(newArrayMap);



// Criar uma string para cada carta com seu ataque e defesa
const dataCardsTwo = require("./dataMap");

const getAtkDef = (cards) => {
  return cards.map((card) => {
    if (card.atk === undefined || card.def === undefined) {
      return `A carta ${card.name} n√£o possui nem ataque nem defesa`
    } else {
      return `A carta ${card.name} tem o ataque de ${card.atk} e a defesa de ${card.def}`
    }
    
  })
};

console.log(getAtkDef(dataCardsTwo.cards));

// Exiba todas as cartas com o ataque maior que 2000
const dataCardsThree = require("./dataMap");

const getCardsByAtk = (dataCardsThree, atkNumber) => {
  const getfilteredCards =  dataCardsThree.filter((card) => card.atk > atkNumber);

  return getfilteredCards;
  }

console.log(getCardsByAtk(dataCardsThree, 2000));



// EXIBA TODAS AS CARTAS DE UM DETERMINADO TIPO DA SEGUINTE FORMA:

/*
[
  { typeId: 1, name: 'Blue-Eyes White Dragon' },
  { typeId: 1, name: 'Red-Eyes Black Dragon' },
  { typeId: 1, name: 'Dragon Queen of Tragic Endings' }
  }
  */
const dataCardsFour = require('./dataMap');
 
const getCardsByType = (data, cardType) => data
  .filter((card) => card.typeId === cardType)
  .map((card) => ({typeId: card.typeId, name: card.name}));


console.log(getCardsByType(dataCardsFour.cards, 1));


// Exerc√≠cio 35
const sortNumbers = [1, 6, 3, 20, 9, 85, 5, 4, 7, 0];

const sortArray = sortNumbers.sort((a,b) => b -a);
console.log(sortArray);